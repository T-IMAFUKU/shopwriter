generator client {
  provider = "prisma-client-js"
}

datasource db {
  // 開発は SQLite、本番は Neon(Postgres) を想定
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Draft {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productName String
  audience    String
  output      String?
}

model ApiLog {
  id      String   @id @default(cuid())
  ts      DateTime @default(now())
  level   String
  message String
  reqId   String?
  phase   String?
  payload String?
}

/*** Auth.js / NextAuth 用（Prisma Adapter 標準モデル、SQLite対応） ***/
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  role          String    @default("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
