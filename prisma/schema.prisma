// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * NextAuth 基本モデル
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  shares   Share[]
  events   MetricEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * 共有（既存機能）
 */
model Share {
  id        String   @id @default(cuid())
  title     String
  body      String?  @db.Text
  isPublic  Boolean  @default(false)

  ownerId   String?
  owner     User?    @relation(fields: [ownerId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events    MetricEvent[]

  @@index([ownerId, isPublic])
}

/**
 * 新規：メトリクスイベント（最小版）
 * - ts: クライアント送信の元時刻（ms/秒は後続で正規化）
 * - receivedAt: サーバ受領時刻（集計キー）
 * - props: 任意メタ（JSONB）
 * - user/ share は将来の結合用に任意紐付け
 */
model MetricEvent {
  id         String   @id @default(cuid())
  event      String
  props      Json?
  ts         BigInt?

  receivedAt DateTime @default(now())
  ip         String?
  ua         String?

  userId     String?
  shareId    String?

  user  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  share Share? @relation(fields: [shareId], references: [id], onDelete: SetNull)

  @@index([event, receivedAt])
  @@index([userId, receivedAt])
  @@index([shareId, receivedAt])
}
