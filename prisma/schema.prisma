generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
/// * NextAuth 基本モデル
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  events        MetricEvent[]
  sessions      Session[]
  shares        Share[]
  Template      Template[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// *
/// * 共有（既存機能）
model Share {
  id        String        @id @default(cuid())
  title     String
  body      String?
  isPublic  Boolean       @default(false)
  ownerId   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  events    MetricEvent[]
  owner     User?         @relation(fields: [ownerId], references: [id])

  @@index([ownerId, isPublic])
}

/// *
/// * 新規：メトリクスイベント（最小版）
/// * - ts: クライアント送信の元時刻（ms/秒は後続で正規化）
/// * - receivedAt: サーバ受領時刻（集計キー）
/// * - props: 任意メタ（JSONB）
/// * - user/ share は将来の結合用に任意紐付け
model MetricEvent {
  id         String   @id @default(cuid())
  event      String
  props      Json?
  ts         BigInt?
  receivedAt DateTime @default(now())
  ip         String?
  ua         String?
  userId     String?
  shareId    String?
  share      Share?   @relation(fields: [shareId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@index([event, receivedAt])
  @@index([userId, receivedAt])
  @@index([shareId, receivedAt])
}

/// === Template: ユーザーのテンプレ文面を保存 ===
/// Note: userId は User.id（String想定）に外部キーで紐付け
model Template {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(255)
  body      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_template_user_id")
}

model EventLog {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  userId     String?
  sessionId  String?
  category   String?
  event      String
  level      EventLevel @default(INFO)
  url        String?
  refType    String?
  refId      String?
  durationMs Int?
  payload    Json?
  context    Json?
  ip         String?
  userAgent  String?

  @@index([createdAt], map: "idx_eventlog_created_at")
  @@index([category, event], map: "idx_eventlog_category_event")
  @@index([userId, createdAt], map: "idx_eventlog_user_created")
}

enum EventLevel {
  INFO
  WARN
  ERROR
}
