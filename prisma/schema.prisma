// =======================
// ShopWriter Prisma Schema
// DB: PostgreSQL (Neon)
// =======================

datasource db {
  provider  = "postgresql"
  // 実行時: DATABASE_URL（-pooler を含む）
  url       = env("DATABASE_URL")
  // Prisma CLI（db push/migrate）: DIRECT_URL（-pooler なし）
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ───────────────────────
// NextAuth 標準モデル
// https://next-auth.js.org/adapters/prisma
// ───────────────────────

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  accounts      Account[]
  sessions      Session[]

  // 拡張
  profile       Profile?
  auditLogs     AuditLog[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ───────────────────────
// 拡張モデル（任意）
// 認可後に初期レコード作成の保存先
// ───────────────────────

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String?
  role        String?   // "admin" | "member" など
  company     String?
  locale      String?   // 例: "ja-JP"

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // 例: "LOGIN", "GENERATE", "CHECK_PASSED" など
  target    String?
  ip        String?
  userAgent String?
  metadata  Json?

  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
}
