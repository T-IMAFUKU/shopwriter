/* eslint-disable react/no-unescaped-entities */
"use client";

import * as React from "react";
import Link from "next/link";

/**
 * StatusBadge（新規作成済み想定）を使用します。
 * intent: "success" | "warn" | "info" などをサポートする実装を想定。
 * パスはプロジェクトの import 統一方針（@/*）に合わせて "@/components/ui/status-badge" を採用。
 * ※ もし設置場所が異なる場合は import パスのみ調整してください（本カードでは 1ファイル単位での差し替え要件に合わせて進行）。
 */
import { StatusBadge } from "@/components/ui/status-badge";

/* 既存 UI/ユーティリティ（必要に応じて） */
import { cn } from "@/lib/utils";

/** ShareCard が受け取る props 。
 * 既存互換を重視し、従来プロパティの“受け口”を広く用意：
 * - status: "public" | "draft"（明示指定があれば優先）
 * - isPublic: boolean（status 未指定時のフォールバック）
 * - createdAtISO / updatedAtISO: SSR/CSR差異を避けるための ISO 文字列（方針に準拠）
 * - variant: "row" | "card"（Step 1.7 由来の行レイアウト最適化互換）
 * - href: 詳細ページなどへのリンク
 * - onCopy/onDelete: トースト等の外部ハンドラ（既存互換）
 */
export type ShareCardProps = {
  id: string;
  title: string;
  description?: string;

  /** "public" | "draft" の明示。なければ isPublic から推定 */
  status?: "public" | "draft";
  isPublic?: boolean;

  createdAtISO?: string;
  updatedAtISO?: string;

  href?: string;
  variant?: "row" | "card";

  onCopy?: (id: string) => void;
  onDelete?: (id: string) => void;

  className?: string;
};

function resolveStatusKey(p: Pick<ShareCardProps, "status" | "isPublic">): "public" | "draft" {
  if (p.status === "public" || p.status === "draft") return p.status;
  return p.isPublic ? "public" : "draft";
}

/** StatusBadge の intent を “public→success / draft→warn” に統一 */
function statusToIntent(statusKey: "public" | "draft"): "success" | "warn" {
  return statusKey === "public" ? "success" : "warn";
}

function formatISO(iso?: string): string {
  if (!iso) return "-";
  // ISO 文字列をそのまま短縮表示（CSR の new Date() 直呼びは避ける方針）
  // 例: "2025-09-21T12:34:56Z" -> "2025-09-21 12:34"
  try {
    const d = new Date(iso);
    if (Number.isNaN(d.getTime())) return iso;
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const dd = String(d.getDate()).padStart(2, "0");
    const hh = String(d.getHours()).padStart(2, "0");
    const mi = String(d.getMinutes()).padStart(2, "0");
    return `${yyyy}-${mm}-${dd} ${hh}:${mi}`;
  } catch {
    return iso;
  }
}

export function ShareCard(props: ShareCardProps) {
  const {
    id,
    title,
    description,
    createdAtISO,
    updatedAtISO,
    href,
    variant = "row",
    onCopy,
    onDelete,
    className,
  } = props;

  const statusKey = resolveStatusKey(props);
  const intent = statusToIntent(statusKey);

  const Wrapper: React.FC<{ children: React.ReactNode; className?: string }> = ({ children, className }) =>
    href ? (
      <Link href={href} className={cn("block focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2", className)}>
        {children}
      </Link>
    ) : (
      <div className={className}>{children}</div>
    );

  return (
    <Wrapper
      className={cn(
        // density / spacing / radius / shadow はトークン適用（統一方針）
        "rounded-2xl shadow-sm border bg-white/95 dark:bg-neutral-900/95 hover:shadow-md transition-shadow",
        variant === "row"
          ? "p-4 md:p-5 flex items-center gap-4"
          : "p-5 md:p-6 grid gap-3",
        className
      )}
    >
      {/* 左：タイトル + 説明 */}
      <div className={cn(variant === "row" ? "flex-1 min-w-0" : "grid gap-1")}>
        <div className="flex items-center gap-2 min-w-0">
          <h3 className="text-base md:text-lg font-semibold truncate">{title}</h3>
          {/* ← ここを Badge → StatusBadge に差し替え */}
          <StatusBadge intent={intent} aria-label={statusKey === "public" ? "公開" : "下書き"}>
            {statusKey === "public" ? "Public" : "Draft"}
          </StatusBadge>
        </div>
        {description ? (
          <p className="text-sm text-muted-foreground line-clamp-2">{description}</p>
        ) : null}
      </div>

      {/* 右：メタ情報（作成/更新）と操作 */}
      <div
        className={cn(
          "flex items-center gap-3 shrink-0",
          variant === "row" ? "ml-auto" : "justify-between"
        )}
        aria-label="meta"
      >
        <div className="hidden sm:flex items-center gap-4 text-xs text-muted-foreground">
          <span>Created: {formatISO(createdAtISO)}</span>
          <span>Updated: {formatISO(updatedAtISO)}</span>
        </div>

        {/* 操作ボタン類（既存の onCopy/onDelete を尊重） */}
        <div className="flex items-center gap-2">
          {onCopy ? (
            <button
              type="button"
              className="px-3 py-1.5 rounded-xl border hover:bg-accent/50 text-sm"
              onClick={(e) => {
                e.preventDefault();
                onCopy(id);
              }}
              aria-label="共有をコピー"
            >
              Copy
            </button>
          ) : null}
          {onDelete ? (
            <button
              type="button"
              className="px-3 py-1.5 rounded-xl border hover:bg-destructive/10 text-sm"
              onClick={(e) => {
                e.preventDefault();
                onDelete(id);
              }}
              aria-label="共有を削除"
            >
              Delete
            </button>
          ) : null}
        </div>
      </div>
    </Wrapper>
  );
}

/** 既存の import 形態の互換性確保（default / named どちらでも使えるように） */
export default ShareCard;
