"use client";

import * as React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu";
import {
  Menu,
  LayoutDashboard,
  FileText,
  Home,
  ChevronDown,
  User,
  LogOut,
} from "lucide-react";
import { radius, shadow, spacing, density } from "@/lib/ui/tokens";

/** ナビ定義 */
type NavItem = {
  label: string;
  href: string;
  icon?: React.ComponentType<React.SVGProps<SVGSVGElement>>;
  badge?: React.ReactNode;
  match: (pathname: string) => boolean;
};

const NAV_ITEMS: NavItem[] = [
  { label: "Home", href: "/", icon: Home, match: (p) => p === "/" },
  {
    label: "Dashboard",
    href: "/dashboard",
    icon: LayoutDashboard,
    match: (p) => p.startsWith("/dashboard"),
  },
  {
    label: "Writer",
    href: "/writer",
    icon: FileText,
    badge: (
      <Badge variant="secondary" className="ml-1 h-4 px-1.5 text-[10px]">
        β
      </Badge>
    ),
    match: (p) => p.startsWith("/writer"),
  },
];

export default function Header() {
  const pathname = usePathname();
  const [open, setOpen] = React.useState(false);

  return (
    <header
      /* トークン適用: 角丸/影/余白/背景/下線を統一（sticky等の既存挙動は維持） */
      className={cn(
        "sticky top-0 z-40 w-full supports-[backdrop-filter]:bg-background/60",
        "ui-header bg-card border-b border-border shadow-var" // ← 追加：トークン
      )}
    >
      {/* インナー：横幅・高さ・インライン余白は spacing で統一 */}
      <div
        className={cn(
          "mx-auto flex h-14 max-w-screen-2xl items-center",
          spacing.sm,
          "sm:px-4"
        )}
      >
        {/* Brand */}
        <div className={cn("flex min-w-0 items-center ui-gap", density.normal)}>
          <Link
            href="/"
            className={cn(
              "inline-flex items-center text-sm font-semibold tracking-tight hover:bg-muted/70 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring",
              spacing.xs,
              radius.md
            )}
          >
            <span className="select-none">ShopWriter</span>
          </Link>
        </div>

        {/* Primary Nav (md+) */}
        <nav
          aria-label="Primary"
          className="ml-2 hidden flex-1 items-center md:flex"
        >
          <ul className={cn("flex items-center ui-gap", density.normal)}>
            {NAV_ITEMS.map((item) => {
              const active = item.match(pathname ?? "");
              const Icon = item.icon;
              return (
                <li key={item.href}>
                  <Link
                    href={item.href}
                    aria-current={active ? "page" : undefined}
                    data-active={active ? "true" : "false"}
                    className={cn(
                      "group inline-flex items-center text-sm font-medium transition-colors hover:bg-muted/70 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring",
                      spacing.sm, // px-3 py-2 相当
                      radius.md,
                      active
                        ? "bg-muted text-foreground"
                        : "text-muted-foreground"
                    )}
                  >
                    {Icon ? (
                      <Icon className="mr-1.5 h-4 w-4 shrink-0 opacity-90 group-data-[active=true]:opacity-100" />
                    ) : null}
                    <span className="truncate">{item.label}</span>
                    {item.badge}
                  </Link>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Actions */}
        <div className={cn("ml-auto flex items-center ui-gap", density.normal)}>
          <Link href="/docs" className="hidden md:inline-flex">
            <Button size="sm" variant="outline" className={radius.lg}>
              Docs
            </Button>
          </Link>
          <Link href="/writer/new" className="hidden sm:inline-flex">
            <Button size="sm" className={radius.lg}>
              New
            </Button>
          </Link>

          {/* User Menu */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                size="sm"
                variant="ghost"
                className={radius.lg}
                aria-label="Open user menu"
              >
                <span className="mr-1 hidden sm:inline">Account</span>
                <ChevronDown className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent
              align="end"
              /* 透け防止＋影はトークンで統一 */
              className={cn("w-44 z-[99999] isolate mix-blend-normal border", shadow.lg)}
              style={{
                backgroundColor: "hsl(var(--background, 0 0% 100%))",
                color: "hsl(var(--foreground, 0 0% 3.9%))",
                WebkitBackdropFilter: "none",
                backdropFilter: "none",
                opacity: 1,
              }}
            >
              <DropdownMenuLabel>My Account</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <Link
                  href="/settings/profile"
                  className="inline-flex w-full items-center"
                >
                  <User className="mr-2 h-4 w-4" />
                  <span>Profile</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <Link
                  href="/settings/preferences"
                  className="inline-flex w-full items-center"
                >
                  <SettingsIcon className="mr-2 h-4 w-4" />
                  <span>Settings</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <button
                  type="button"
                  className="inline-flex w-full items-center text-left"
                  onClick={() => {
                    window.location.href = "/api/auth/signout";
                  }}
                >
                  <LogOut className="mr-2 h-4 w-4" />
                  <span>Sign out</span>
                </button>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          {/* Mobile trigger */}
          <Button
            size="sm"
            variant="ghost"
            className={cn("md:hidden", radius.lg)}
            aria-label="Open menu"
            onClick={() => setOpen((v) => !v)}
          >
            <Menu className="h-5 w-5" />
          </Button>
        </div>
      </div>

      {/* Mobile Nav (md-) */}
      <div
        data-open={open ? "true" : "false"}
        className={cn("border-t md:hidden", open ? "block" : "hidden")}
      >
        <nav
          aria-label="Mobile"
          className={cn("mx-auto max-w-screen-2xl", spacing.sm, "py-2")}
        >
          <ul className={cn("flex flex-col ui-gap", density.normal)}>
            {NAV_ITEMS.map((item) => {
              const active = item.match(pathname ?? "");
              const Icon = item.icon;
              return (
                <li key={item.href}>
                  <Link
                    href={item.href}
                    aria-current={active ? "page" : undefined}
                    data-active={active ? "true" : "false"}
                    className={cn(
                      "group inline-flex w-full items-center justify-between text-sm font-medium transition-colors hover:bg-muted/70 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring",
                      spacing.sm,
                      radius.md,
                      active
                        ? "bg-muted text-foreground"
                        : "text-muted-foreground"
                    )}
                    onClick={() => setOpen(false)}
                  >
                    <span className="inline-flex items-center">
                      {Icon ? (
                        <Icon className="mr-1.5 h-4 w-4 shrink-0 opacity-90 group-data-[active=true]:opacity-100" />
                      ) : null}
                      {item.label}
                      {item.badge}
                    </span>
                  </Link>
                </li>
              );
            })}
            <li className={cn("mt-1 flex items-center ui-gap", density.normal)}>
              <Link href="/docs" className="flex-1">
                <Button
                  size="sm"
                  variant="outline"
                  className={cn("h-9 w-full", radius.lg)}
                >
                  Docs
                </Button>
              </Link>
              <Link href="/writer/new" className="flex-1">
                <Button size="sm" className={cn("h-9 w-full", radius.lg)}>
                  New
                </Button>
              </Link>
            </li>
          </ul>
        </nav>
      </div>
    </header>
  );
}

/** Inline settings icon (kept) */
function SettingsIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      viewBox="0 0 24 24"
      aria-hidden="true"
      role="img"
      className="h-4 w-4"
      {...props}
    >
      <path
        d="M12 15.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm8.94-3.27a7.96 7.96 0 0 0 .03-1.46l2.02-1.58a.5.5 0 0 0 .12-.64l-1.92-3.32a.5.5 0 0 0-.6-.23l-2.38.96a8.07 8.07 0 0 0-1.26-.73l-.36-2.53A.5.5 0 0 0 15.1.7l-3.8 0a.5.5 0 0 0-.49.42l-.36 2.53c-.44.18-.86.4-1.26.66l-2.38-.96a.5.5 0 0 0-.6.23L1.3 6.43a.5.5 0 0 0 .12.64l2.02 1.58c-.05.48-.05.98 0 1.46L1.42 11.7a.5.5 0 0 0-.12.64l1.92 3.32a.5.5 0 0 0 .6.23l2.38-.96c.4.26.82.48 1.26.66l.36 2.53c.04.24.25.42.49.42h3.8c.24 0 .45-.18.49-.42l.36-2.53c.44-.18.86-.4 1.26-.66l2.38.96a.5.5 0 0 0 .6-.23l1.92-3.32a.5.5 0 0 0-.12-.64l-2.02-1.58Z"
        className="fill-current"
      />
    </svg>
  );
}
